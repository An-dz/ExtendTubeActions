{
    "actions": {
        "move and scroll lyrics": {
            "enabled": true,
            "exec": "/**\n * @version 1.6\n */\n\n// Action trigger: document modified\n\n/*! settings begin */\nvar // Let lyrics height be same as player height (normal player size, not wide).\n\tlimitHeight = true, /* [default = true] [recommended = true] */\n\n\t// Height of lyrics container (in pixels).\n\t// Used only when lyrics height is limited.\n\tlyricsHeight = 350, /* [default = 350] [no recommended value] */\n\n\t// Scroll lyrics automatically.\n\t// This works only if previous option is true.\n\tautoScroll = true, /* [default = true] [recommended = true] */\n\n\t// Use adaptive scroll speed. This option will produce most smooth\n\t// scrolling when it's enabled. Lyrics scroll interval will be\n\t// recalculated so lyrics will always move just one pixel.\n\tadaptScrollSpeed = true, /* [default = true] [recommended = true] */\n\n\t// How often to move lyrics (in milliseconds).\n\t// Lower number = smoother scrolling (don't go to low).\n\t// This value will be recalculated if adaptive scroll is enabled.\n\tscrollInterval = 321, /* [default = 321] [no recommended value] */\n\n\t// Start scrolling when video reaches n% (percent) of the length.\n\tstartAt = .15, /* [default = .15] [no recommended value] */\n\n\t// Stop scrolling after video reaches n% (percent) of the length.\n\t// By this time whole lyrics will be scrolled.\n\tstopAt = .85, /* [default = .85] [no recommended value] */\n\n\t// Save start and stop times for lyrics auto scroll so they can be reused\n\t// when you watch same video again. Uses localStorage to save data.\n\t// Default values won't be saved.\n\tstoreSettings = true, /* [default = true] [recommended = true] */\n/*! settings end */\n\n\tsidebar = document.querySelector(\"#watch7-sidebar, #watch-sidebar\"),\n\tlyrics = document.querySelector(\".ext-lyrics\"),\n\tlyricsBody = document.querySelector(\".ext-lyrics-body\"),\n\tinterval = NaN, previousTime = 0,\n\tdefaultStartAt = startAt, defaultStopAt = stopAt\n\nif (sidebar && lyrics) {\n\taddStyle()\n\tsidebar.insertAdjacentElement(\"afterbegin\", lyrics)\n\t// Set these so lyrics can be placed back in sidebar if they are disabled\n\t// and then re-enabled in extension preferences.\n\t// Requires ExtendTube >1.16.5 to work correctly.\n\tsidebar.classList.add(\"ext-lyrics-container\")\n\tsidebar.dataset.extLyricsPosition = \"afterbegin\"\n\n\tif (limitHeight && autoScroll)\n\t\tautoScrollSetup()\n}\n\nfunction addStyle() {\n\tvar style = document.createElement(\"style\"),\n\t\tcss = \"\\\n.ext-actions-container {\\n\\\n\tfloat: right;\\n\\\n\tborder-width: 0;\\n\\\n\tz-index: 1;\\n\\\n}\\n\\\n.ext-lyrics {\\n\\\n\tmargin: 0 0 10px 7px;\\n\\\n\tpadding: 0 !important;\\n\\\n}\\n\\\n.ext-lyrics:not(:hover) .yt-uix-button-text {\\n\\\n\tbackground: transparent !important;\\n\\\n}\\n\\\n.ext-lyrics:hover .yt-uix-button-text {\\n\\\n\tbackground-image: -o-linear-gradient(top, hsl(0, 0%, 97%) 0px, hsl(0, 0%, 93%) 100%);\\n\\\n\tbackground-image: linear-gradient(to bottom, hsl(0, 0%, 97%) 0px, hsl(0, 0%, 93%) 100%);\\n\\\n\tborder-color: hsl(0, 0%, 78%);\\n\\\n}\\n\\\n.watch-branded .ext-lyrics {\\n\\\n\tmargin: -15px 0 10px 7px;\\n\\\n}\\n\\\n.ext-lyrics .ext-lyrics-body {\\n\\\n\tpadding: 0;\\n\\\n}\\n\\\n.ext-lyrics .comments-section {\\n\\\n\tmargin: 0;\\n\\\n}\\n\\\n.ext-lyrics .comments-section h4 {\\n\\\n\tbackground-image: none;\\n\\\n\tpadding: 0 !important;\\n\\\n}\\n\"\n\n\tif (limitHeight)\n\t\tcss += \"\\\n.ext-lyrics {\\n\\\n\tposition: relative;\\n\\\n}\\n\\\n.ext-lyrics .comments-section h4 {\\n\\\n\tmax-height: 15px;\\n\\\n\toverflow: hidden;\\n\\\n\ttext-overflow: ellipsis;\\n\\\n\twhite-space: nowrap;\\n\\\n}\\n\\\n.ext-lyrics .ext-lyrics-body {\\n\\\n\tmax-height: \" + lyricsHeight + \"px;\\n\\\n\toverflow: hidden;\\n\\\n}\\n\\\n.ext-lyrics .lyricbox {\\n\\\n\tpadding-bottom: 5px;\\n\\\n}\\n\\\n.ext-action-move-lyrics-buttons {\\n\\\n\tdisplay: none;\\n\\\n\tposition: absolute;\\n\\\n\tbottom: 0;\\n\\\n\tright: 0;\\n\\\n\tz-index: 1;\\n\\\n}\\n\\\n.ext-lyrics:hover .ext-lyrics-body:not(.ext-hidden) ~ .ext-action-move-lyrics-buttons {\\n\\\n\tdisplay: block;\\n\\\n}\\n\\\n.ext-action-move-lyrics-buttons button {\\n\\\n\theight: 18px;\\n\\\n}\\n\\\n.ext-action-move-lyrics-buttons button:first-child {\\n\\\n\tborder-top-right-radius: 0;\\n\\\n\tborder-bottom-right-radius: 0;\\n\\\n\tborder-right-width: 0;\\n\\\n}\\n\\\n.ext-action-move-lyrics-buttons button:last-child {\\n\\\n\tborder-top-left-radius: 0;\\n\\\n\tborder-bottom-left-radius: 0;\\n\\\n}\\n\\\n.ext-action-move-lyrics-buttons button:first-child:hover {\\n\\\n\tborder-right-width: 1px;\\n\\\n}\\n\\\n.ext-action-move-lyrics-buttons button:first-child:hover + button {\\n\\\n\tborder-left-width: 0;\\n\\\n}\\n\\\n.ext-lyrics-scroll-bar {\\n\\\n\tpadding: 0;\\n\\\n\theight: 44px;\\n\\\n\twidth: 6px;\\n\\\n\tborder-radius: 3px;\\n\\\n\tposition: absolute;\\n\\\n\ttop: 16px;\\n\\\n\tright: 0;\\n\\\n\topacity: 0;\\n\\\n}\\n\\\n.ext-lyrics:hover .ext-lyrics-scroll-bar {\\n\\\n\topacity: .6;\\n\\\n}\\n\\\n.ext-lyrics:hover .ext-lyrics-scroll-bar:hover {\\n\\\n\topacity: 1;\\n\\\n}\\n\"\n\n\tstyle.type = \"text/css\"\n\tstyle.dataset.styleFor = \"ext-action-move-lyrics\"\n\tstyle.textContent = css\n\n\tdocument.querySelector(\"head\").appendChild(style)\n}\n\nfunction autoScrollSetup() {\n\tvar reset, stop, buttons\n\n\tlyrics.querySelector(\".expand\").addEventListener(\"click\", function () {\n\t\t// If lyrics are not retrieved wait for them.\n\t\tif (!lyricsBody.querySelector(\".lyricbox\"))\n\t\t\treturn setTimeout(arguments.callee, 1e3)\n\n\t\tif (!lyricsBody.querySelector(\".ext-lyrics-scroll-bar\"))\n\t\t\taddScrollBar()\n\n\t\tif (lyricsBody.classList.contains(\"ext-hidden\"))\n\t\t\tstopScrollingLyrics()\n\t\telse\n\t\t\tstartScrollingLyrics()\n\t}, false)\n\n\treset = document.createElement(\"button\")\n\treset.className = \"yt-uix-tooltip yt-uix-button yt-uix-button-text\"\n\treset.textContent = \"Reset\"\n\treset.dataset.tooltipText = \"Use current time as start of autoscroll.\"\n\t\t\t\t\t\t\t\t+ \"<br>(click here once artist starts singing).\"\n\treset.addEventListener(\"click\", resetButtonListener, false)\n\n\tstop = document.createElement(\"button\")\n\tstop.className = \"yt-uix-tooltip yt-uix-button yt-uix-button-text\"\n\tstop.textContent = \"Stop\"\n\tstop.dataset.tooltipText = \"Stop scrolling.\"\n\tstop.addEventListener(\"click\", stopButtonListener, false)\n\n\tbuttons = document.createElement(\"span\")\n\tbuttons.classList.add(\"ext-action-move-lyrics-buttons\")\n\tbuttons.appendChild(stop)\n\tbuttons.appendChild(reset)\n\tlyricsBody.insertAdjacentElement(\"afterend\", buttons)\n}\n\nfunction resetButtonListener(event) {\n\tthis.blur()\n\tvar currentTime = xtt.player.api && xtt.player.api.getCurrentTime()\n\tif (currentTime) {\n\t\tif (!event.shiftKey) {\n\t\t\tstartAt = (currentTime + (xtt.video.length - currentTime) * .05) / xtt.video.length\n\t\t\tstopAt = (currentTime + (xtt.video.length - currentTime) * stopAt) / xtt.video.length\n\t\t}\n\t\telse\n\t\t\tstopAt = currentTime * .95 / xtt.video.length\n\n\t\tpreviousTime = 0\n\t\tif (adaptScrollSpeed === null)\n\t\t\tadaptScrollSpeed = true\n\n\t\tlogScrollSection()\n\n\t\tif (storeSettings)\n\t\t\tsaveSettings()\n\t}\n}\n\nfunction stopButtonListener(event) {\n\tthis.blur()\n\n\tif (interval) {\n\t\tstopScrollingLyrics()\n\n\t\tthis.textContent = \"Start\"\n\t\tthis.dataset.tooltipText = \"Start scrolling.\"\n\t}\n\telse {\n\t\tstartScrollingLyrics()\n\n\t\tthis.textContent = \"Stop\"\n\t\tthis.dataset.tooltipText = \"Stop scrolling.\"\n\n\t\tif (7e2 < scrollInterval)\n\t\t\tscrollLyrics()\n\t}\n}\n\nfunction startScrollingLyrics() {\n\tif (lyricsBody.clientHeight < lyricsBody.scrollHeight) {\n\t\tloadSettings()\n\t\tinterval = setInterval(scrollLyrics, scrollInterval)\n\n\t\tlogScrollSection()\n\t}\n\telse\n\t\txtt.log.info('Whole lyrics are visible. No need to scroll them.')\n}\n\nfunction stopScrollingLyrics() {\n\tclearInterval(interval)\n\tinterval = NaN\n\n\txtt.log.info('Lyrics auto scroll is disabled.')\n}\n\nfunction formatTime(seconds) {\n\tvar time = new Date()\n\ttime.setHours(0, 0, 0, 0)\n\ttime.setSeconds(seconds)\n\n\treturn time.toLocaleTimeString().replace(/^0+(:0?)?/, \"\")\n}\n\nfunction logScrollSection() {\n\txtt.log.info('Lyrics auto scrolling will start when playback reaches '\n\t\t\t\t\t + formatTime(xtt.video.length * startAt) + ' and end when it reaches '\n\t\t\t\t\t + formatTime(xtt.video.length * stopAt) + '.')\n}\n\nfunction scrollLyrics() {\n\tif (!xtt.player.api)\n\t\treturn\n\n\tvar currentTime = xtt.player.api.getCurrentTime(),\n\t\tlength = xtt.video.length,\n\t\tprogress\n\n\tif (!currentTime || currentTime == previousTime)\n\t\treturn\n\n\tif (Math.abs(currentTime - previousTime) < 2)\n\t\tprogress = (previousTime + scrollInterval / 1e3) / length\n\telse\n\t\tprogress = currentTime / length\n\n\tif (progress < startAt) {\n\t\tif (3 < Math.abs(currentTime - previousTime))\n\t\t\tlyricsBody.scrollTop = 0\n\t}\n\telse if (stopAt < progress) {\n\t\tif (3 < Math.abs(currentTime - previousTime))\n\t\t\tlyricsBody.scrollTop = lyricsBody.scrollHeight - lyricsBody.clientHeight\n\t}\n\telse {\n\t\tif (adaptScrollSpeed) {\n\t\t\tscrollInterval = 1e3 / (lyricsBody.scrollHeight - lyricsBody.clientHeight)\n\t\t\t\t\t\t\t\t * (length * stopAt - length * startAt)\n\n\t\t\tif (scrollInterval < 50)\n\t\t\t\tscrollInterval = 50\n\t\t\telse if (1e4 < scrollInterval)\n\t\t\t\tscrollInterval = 5e3\n\n\t\t\tclearInterval(interval)\n\t\t\tinterval = setInterval(scrollLyrics, scrollInterval)\n\t\t\tadaptScrollSpeed = null\n\n\t\t\txtt.log.info('Lyrics scroll interval recalculated. New value is: ' + scrollInterval + '.')\n\t\t}\n\n\t\tlyricsBody.scrollTop = (lyricsBody.scrollHeight - lyricsBody.clientHeight)\n\t\t\t\t\t\t\t\t   * (currentTime - length * startAt)\n\t\t\t\t\t\t\t\t   / (length * stopAt - length * startAt)\n\t}\n\n\tpreviousTime = currentTime\n}\n\nfunction getSettings() {\n\tvar settings = window.localStorage.getItem(\"ext-lyrics-auto-scroll-times\")\n\tif (settings)\n\t\treturn window.JSON.parse(settings)\n}\n\nfunction saveSettings() {\n\tif (startAt == defaultStartAt && stopAt == defaultStopAt)\n\t\treturn\n\n\tvar settings = getSettings() || {}\n\tsettings[xtt.video.getVideoID()] = {\n\t\tstartAt: startAt,\n\t\tstopAt: stopAt\n\t}\n\n\twindow.localStorage.setItem(\"ext-lyrics-auto-scroll-times\", window.JSON.stringify(settings))\n}\n\nfunction loadSettings() {\n\tvar settings = getSettings(),\n\t\tid = xtt.video.getVideoID()\n\n\tif (settings && settings.hasOwnProperty(id)) {\n\t\tstartAt = settings[id].startAt\n\t\tstopAt = settings[id].stopAt\n\t}\n}\n\nfunction addScrollBar() {\n\tvar scrollBar = document.createElement(\"button\")\n\t\tscrollBarHeight = Math.round(Math.pow(lyricsBody.clientHeight, 2) / lyricsBody.scrollHeight)\n\n\tscrollBar.className = \"yt-uix-button yt-uix-button-text yt-uix-button-default ext-lyrics-scroll-bar\"\n\tscrollBar.style.setProperty(\"height\", scrollBarHeight + \"px\")\n\tlyricsBody.appendChild(scrollBar)\n\n\tlyricsBody.addEventListener(\"scroll\", function (event) {\n\t\tvar progress = lyricsBody.scrollTop / (lyricsBody.scrollHeight - lyricsBody.clientHeight)\n\n\t\tscrollBar.style.setProperty(\"top\",\n\t\t\t\t\t\t\t\t\t(lyricsBody.offsetTop\n\t\t\t\t\t\t\t\t\t\t+ (lyricsBody.clientHeight - scrollBarHeight) * progress)\n\t\t\t\t\t\t\t\t\t\t+ \"px\")\n\t}, false)\n\n\tlyricsBody.addEventListener(\"mousewheel\", function (event) {\n\t\tevent.preventDefault()\n\t\tlyricsBody.scrollTop += event.detail * 27\n\t}, false)\n\n\tscrollBar.addEventListener(\"mousedown\", function (event) {\n\t\tevent.preventDefault()\n\t\tvar bar = this.getBoundingClientRect(),\n\t\t\tbody = lyricsBody.getBoundingClientRect()\n\n\t\tlyricsBody.dataset.scrollStart = body.top + event.clientY - bar.top\n\t\tlyricsBody.dataset.scrollEnd = body.top + body.height - bar.top - bar.height + event.clientY\n\n\t\tdocument.addEventListener(\"scroll\", preventDocumentScroll, false)\n\t\tdocument.addEventListener(\"mousemove\", moveLyrics, false)\n\t\tdocument.addEventListener(\"mouseup\", function mouseUp() {\n\t\t\tdocument.removeEventListener(\"scroll\", preventDocumentScroll, false)\n\t\t\tdocument.removeEventListener(\"mousemove\", moveLyrics, false)\n\t\t\tdocument.removeEventListener(\"mouseup\", mouseUp, false)\n\t\t}, false)\n\t}, false)\n}\n\nfunction moveLyrics(event) {\n\tvar scrollStart = +lyricsBody.dataset.scrollStart,\n\t\tscrollEnd = +lyricsBody.dataset.scrollEnd\n\n\tlyricsBody.scrollTop = (lyricsBody.scrollHeight - lyricsBody.clientHeight)\n\t\t\t\t\t\t\t   * (event.clientY - scrollStart) / (scrollEnd - scrollStart)\n}\n\nfunction preventDocumentScroll(event) {\n\tevent.preventDefault()\n}\n",
            "trigger": "doc modified"
        }
    }
}
